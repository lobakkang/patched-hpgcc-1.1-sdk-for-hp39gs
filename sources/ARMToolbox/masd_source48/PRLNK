HPHP49-C,*°::

*****************************************************
* FcnLink: OBTAIN A POINTER TO A FUNCTION
*               By Claudio Lapilli
*               ENTRY: ARM code ON STACK
*                      HXS or BINT W/FUNCTION NUMBER
*               RETURN: HXS on the stack with data
*                       to launch the program
*****************************************************

CK2
DUPTYPEHSTR? IT HXS>#
DUPTYPEBINT? NcaseTYPEERR
CODE
  SAVE
  A=DAT1.A
  A+5.A
  D0=A
  C=DAT0.A
  R3=C.A   % SAVE FCN NUMBER
  D1+5
  A=DAT1.A
  D0=A
  % FIND TYPE OF LAUNCH
  A=DAT0.A
  C=0.A
  R2=C.A      % R2=SWITCH ROUTINE
  B=0.S
  B=B-2.S     % DEFAULT TO MAIN RAM
  LC(5) DOTAG
  ?C=A.A
  GOYES IDLAUNCH
  LC(5) DOLIST
  ?C=A.A
  GOYES IDLAUNCH
  LC(5) DOIDNT
  ?C=A.A
  GOYES IDLAUNCH2
  LC(5) DOROMP
  ?C#A.A
  GOYES INDIRECTSLNCH
  GOTO ROMPLAUNCH
  
*IDNOTFOUND
  P=0
  LC(5) $11308
  GOVLNG GPErrjmpC
*IDLAUNCH
  CD0EX
  D0=C
  D1=C
  GOSBVL RclAssembly
  P=0
  GOC IDNOTFOUND
*DONERCL
  C=D.A
  R2=C.A
  CD0EX
  D0=C
  P=C.4
  ?P=0
  GOYES IDNOTFOUND
  P=0
*INDIRECTSLNCH
  GOTO STRINGLAUNCH

*IDLAUNCH2
  CD0EX
  D1=C
  D1+5   % POINT AFTER DOIDNT
  D0=(5) CONTEXT
  A=DAT0.A
*DIRLOOP
  B=A.A
  D=0.A
  GOSBVL FindInDir
  GONC DONERCL
  A=B.A
  GOSBVL GETRRP
  GONC DIRLOOP
  GOTO IDNOTFOUND

*ROMPLAUNCH 
  D0+5
  A=DAT0.3       % READ ROMID
  D0+3
  C=0.A
  C=DAT0.3       % READ ROMP NUMBER
  R4=C.A         % SAVE IN R4
  D1=(5) $8611D
  C=DAT1.3
  D=C.X          % COUNT IN THE TABLE
  D1+3           % POINT TO FIRST ENTRY

*FINDLIB
  D=D-1.X
  GOC NOTFOUND
  C=DAT1.3       % SEARCH ROMID IN ROMPART TABLE
  ?C=A.X
  GOYES FOUNDLIB
  D1+16
  GOTO FINDLIB
*NOTFOUND
  LC(5) $11303
  GOVLNG GPErrjmpC
*FOUNDLIB
  D1+3
  C=DAT1.A       % ADDRESS OF LIBRARY, POINTING TO ROMID
  R0=C.A
  D1=C
  D1+13         % POINT TO LINK TABLE OFFSET
  A=DAT1.A
  CD1EX
  C=C+A.A       % POINT TO START OF LINK TABLE
  C=C+10.A      % SKIP PROLOG+SIZE
  A=R4.A
  C=C+A.A
  A=A+A.A
  A=A+A.A
  C=C+A.A       % ADD 5*ROMP NUMBER
  CD1EX
  A=DAT1.A
  CD1EX
  C=C+A.A
  CD0EX         % D0=>POINTING TO PROLOG OF OBJECT

  % CHECK IF VALID ARM PROGRAM
*STRINGLAUNCH
  A=DAT0.A
  LC(5) DOEXT0
  ?C=A.A
  GOYES ISLIBDATA
  LC(5) DOCODE
  ?C=A.A
  GOYES ISLIBDATA
  LC(5) DOHXS
  ?C=A.A
  GOYES ISLIBDATA
  LC(5) DOCSTR
  ?C=A.A
  GOYES ISLIBDATA
*INVALIDPROG  
  LC(5) $11304
  GOVLNG GPErrjmpC

*ISLIBDATA
  D0+5
  C=DAT0.A
  C=C-5.A
  C=C-14.A   % C=SIZE OF ARM PROGRAM
  R0=C.A     % R0=SIZE OF DATA
  D0+5
  C=DAT0.8   % READ FIRST WORD
  LA(5) $0B34C
  ?C#A.A     % IF STARTS WITH \\\"L\\179\\\" IS VALID
  GOYES INVALIDPROG

  D0+5
  C=0.A
  C=DAT0.1   % READ OFFSET TO ARM CODE
  D0+1
  AD0EX
  A=A+C.A    % POINT TO START OF ARM CODE
  R1=A.A     % R1=SAVED ACTUAL ADDR
  A=A+A.P
  ?A=0.P     % CHECK IF ADDRESS IS WORD ALIGNED
  GOYES ISALIGNED

% CODE WAS MISALIGNED, ERROR
  LC(5) $11305
  GOVLNG GPErrjmpC

*NOSTRUCT
  % LAUNCH FROM START OF CODE
  % WITHOUT RAM

  C=R1.A  % ACTUAL ARMCODE ADDRESS
  GOSUB SAT2ARM
  R4=C.W
  GOTO CHECKPASSED

*ISALIGNED

  A=R1.A     % ACTUAL ARMCODE ADDRESS
  C=R0.A     % SIZE OF CODE
  A=A+C.A
  A=A-8.A    % POINT TO LAST WORD
  D0=A
  C=0.W
  R4=C.W     % ABS ADDRESS OF CODE+RAM REQ
  A=0.W
  C=DAT0.8
  LA(8)  $3176B34C
  ?A#C.W
  GOYES NOSTRUCT
  D0-8
       % SAFETY CHECK
  C=R1.A
  GOSUB SAT2ARM
  A=0.W
  A=DAT0.8  % READ BASE OFFSET
  D=A.W

  C=R3.A
  C=C+1.A
  GONC FUNCTION
*GETDATA
  D0-8
  C=0.W
  C=DAT0.8   % READ OFFSET
  C=C-D.W    % CALC OFFSET
  D=C.W
  C=R1.A
  GOSUB SAT2ARM
  D=D+C.W
  D0-16
  C=DAT0.W   % PUT MEMORY REQUIREMENTS IN HIGH WORD
  P=7
  C=D.WP
  P=0
  R4=C.W     % SAVE DATA TO RETURN TO SYSRPL

*CHECKPASSED

  GOSBVL GETPTR
  A=R4.W
  P=15
  GOVLNG PUSHhxsLoop
  
*FUNCTION
  D0-16
  D0-8  % D0->NUMBER OF PTRS
  A=DAT0.A
  ?C<=A.A
  GOYES OKFCN
  LC(5) $11309   % ERROR INALID FCN NUMBER
  GOVLNG GPErrjmpC
*OKFCN
  C-1.A
  CSL.A
  AD0EX
  A=A-C.A
  AD0EX        % D0->ENTRY PT+8
  GOTO GETDATA
  
*SAT2ARM
 % CONVERT SATURN ADDR TO ARM
 % ENTRY: C.A=SAT ADDR
 % EXIT: C.W=ARM ADDR
 % USES: A.W C.W P
  A=0.W
  CSRB.A
  A=C.A
  C=0.W
  LC(7) $7FC8000
  C=C+A.W
  RTN

ENDCODE
SWAPDROP
;
@