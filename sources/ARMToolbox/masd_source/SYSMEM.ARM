	AREA	Launcher, CODE

	DCD 0xCDCDCDCD

	ENTRY
offsetzero
main	
	STMFD SP!,{R0-R12,R14}

	LDR R2,[R1,#0x920]			; find address of MMU to put new pages
	LDR R5,[R1,#0x914]			; number of pages
	ADD R4,R2,R5,LSL #2			; point to next MMU entry

	LDR R2,maxrequest			; START REQUESTING MEMORY
requestloop
	CMP R2,#0
	BEQ noaddpages
	BL  kos_malloc
	CMP R0,#0
	SUB R2,R2,#1024
	BEQ requestloop				; LOOP UNTIL BLOCK IS VALID
	MOV R1,R0
	BL  kos_free				; FREE THE BLOCK

	SUB R2,R2,#16384			; LEAVE 16K FREE FOR OTHER TASKS
	BL  kos_malloc

	CMP R0,#0
	BEQ noaddpages				; MAKE SURE WE GOT IT

	MOV R6,R0				; SAVE MEMORY BLOCK ADDRESS

	ADD R1,R0,R2				; FIND FINAL ADDRESS
	ORR R1,R1,#0xFF0
	BIC R1,R1,#0xF				; LAST PAGE (NOT INCLUDED)
	ADD R1,R1,#0xE				; CACHE+BUFFER

	ADD R2,R0,#4096
	SUB R2,R2,#1
	ORR R2,R2,#0xFF0
	BIC R2,R2,#0xF				; R2=FIRST VALID PAGE TO ADD
	ADD R2,R2,#0xE				; CACHE+BUFFER
	SUB R4,R4,#4
addpages
	CMP R2,R1
	BGE endpages
	STR R2,[R4,#4]!
	ADD R2,R2,#4096
	ADD R5,R5,#1
	B addpages
endpages
	LDR R1,[SP,#4]				; PRE-DECREMENT
	STR R5,[R1,#0x914]			; store new number of pages
	MOV R2,#0
	STR R2,[R4,#4]				; ZERO MARKER FOR END-OF-MMU
	
	STR R6,[R1,#0x918]			; B.HI=ALLOCATED MEMORY BLOCK	

jmpnow
	LDR R2,originaljump
	STR R2,[R1,#0x91C]			; C.LO=NEW JUMP ADDRESS
	LDMFD SP!,{R0-R12,R14}
	LDR PC,[R1,#0x91C]			; JUMP TO IT
noaddpages
	LDR R1,[SP,#4]				; PRE-DECREMENT
	B jmpnow
kos_malloc
	MOV R1,#0x2000
	MOV R0,#201
syscall
	STMFD SP!,{R1-R12,LR}
	ADR LR, syscallret
	SWI 0
syscallret
	LDMFD SP!,{R1-R12,PC}
kos_free
	MOV R0,#101
	B syscall

maxrequest
	DCD 120*1024
originaljump
	DCD 0xFFFFFFFF
		

       END