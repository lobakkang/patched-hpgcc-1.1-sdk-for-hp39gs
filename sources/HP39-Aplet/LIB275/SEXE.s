


::
 GARBAGE

* FIX STRING
CODE

* DECLARE EXTERNAL SYSTEM VARIABLES

=DSKTOP EQU #806F8
=RSKTOP EQU #806F3

  GOSBVL    =SAVPTR
  A=DAT1    A
  D0=A
  
* % FIND TYPE OF LAUNCH
  A=DAT0    A
  C=0    A
* % D0->PROLOG OF STRING
* % R2.A=SWITCH ROUTINE
* % *********************************************
* % ALIGN THE CODE IF IT IS AN ARM PROGRAM
* % *********************************************

ALIGNOBJECT

* % ENTRY: D0=PROLOG OF OBJ
* %        D.S=ISBACKUP?
* %        R2=SWITCH ROUTINE
* %        B.S=BANK NUMBER
* %        R1.A->PROLOG OF BACKUP IF D.S=1
* % USES: ALL BUT D1, R3 AND R4
  D0=D0+	10
  C=DAT0    A
  LA(5)  #0B34C
  ?C=A       A     % IF STARTS WITH \\\\\\\"L\\\\179\\\\\\\" IS VALID
  GOYES VALIDPRG     % NOT AN ARM V3 PROGRAM
INVALIDPROG
  LA(5) #103
  GOSBVL =$jGETPTR
  GOVLNG =$jErrjmp
VALIDPRG
  D0=D0-	5       % POINT TO OBJECT SIZE
  C=DAT0    A   % READ SIZE OF LIBDATA OBJECT
  C=C-CON    A,5
  C=C-CON    A,14  % C=SIZE OF ARM PROGRAM
  R0=C.F        A     % R0=SIZE
  D0=D0+        10      % SKIP SIZE AND MARKER
  C=0        A
  C=DAT0        1   % READ OFFSET TO ARM CODE
  AD0EX
  D0=A
  A=A+1        A    % SKIP OFFSET
  ACEX        A
  D=C        A      % D=SAVED SCRATCH AREA
  A=A+C        A    % A=ACTUAL START OF ARM CODE
  R3=A.F        A     % R4=SAVED ACTUAL ADDR
 
  C=A        A
  A=A+A        P
  ?A#0        P     % CHECK IF ADDRESS IS WORD ALIGNED
  GOYES MISALIGNED
  GOTO ISALIGNED2
MISALIGNED
* % CODE WAS MISALIGNED, FIX IT
  C=D        A
  C=C+CON    A,7
  LA(1) 8
  C=C&A        P    % C=NEW ALIGNED ADDRESS
  A=C        A     % A=SAVED NEW ADDR
  C=C-D        A    % C=OFFSET OF THE RELOCATED CODE
  DAT0=C        P
  C=R3.F        A     % C=ORG ADDR
  R3=A.F        A     % SAVE NEW ADDRESS AS ACTUAL
  ?A<C        A
  GOYES DOMDOWN  % DECIDE IF COPY UP OR DOWN
 
  CR0EX.F        A     % C=SIZE OF CODE
  A=A+C        A    % POINT TO END OF BLOCK
  AD1EX      % D1=DEST
  B=A        A      % B=SAVED D1
  A=C        A
  CR0EX.F        A
  C=C+A        A    % POINT TO END OF BLOCK
  CD0EX    % D0=SOURCE
  C=R0.F        A
  GOSBVL        =$jMOVEUP
  GOTO ISALIGNED
 
DOMDOWN
  AD1EX       % D1=DEST
  B=A    A       % SAVE D1
  CD0EX    % D0=SOURCE
  C=R0.F    A     % C=SIZE
  GOSBVL        =$jMOVEDOWN
 
ISALIGNED
  
  C=B    A
  D1=C       % RESTORE SAVED D1 
 
ISALIGNED2

DONEFIX
* LINK TO STRING




* R3.A = START OF ARM CODE
* R0.A = SIZE OF ARM CODE
* ORIGINALLY R1.A=ARM ADDRESS, R3.A= FUNCTION NUMBER
  A=R3.F    A     % ACTUAL ARMCODE ADDRESS
  C=R0.F    A     % SIZE OF CODE
  A=A+C    A
  A=A-CON    A,8    % POINT TO LAST WORD
  D0=A
  C=0    W
  A=0    W
  C=DAT0    8
  LA(8)  #3176B34C
  ?A=C    W
  GOYES YESSTRUCT

*  % LAUNCH FROM START OF CODE
*  % WITHOUT RAM

  C=R3.F    A  % ACTUAL ARMCODE ADDRESS
  GOSUB SAT2ARM
  R1=C.F    W
  C=0    A
  R2=C.F    X
  GOTO CHECKPASSED

YESSTRUCT
  D0=D0-    8
  A=0    W
  A=DAT0    8  % READ BASE OFFSET

*  D=A    W
  NIBHEX 80B0837

ADDRCORRECT

** REMOVED FOR 39G+ SUPPORT
** ONLY PRIMARY ENTRY POINT SUPPORTED
*  C=R3.A
*  C=C+1.A
*  GONC FUNCTION
GETDATA
  D0=D0-    8
  C=0    W
  C=DAT0    8   % READ OFFSET
  C=C-D    W    % CALC OFFSET
  D=C    W
  C=R3.F    A
  GOSUB SAT2ARM
  C=C+D    W
  R1=C.F    W
  D0=D0-    8
  C=DAT0    A   % READ MEMORY REQUIREMENT
  D0=D0+    5
  A=DAT0    X
  R2=A.F    X

CHECKPASSED
  GOTO STARTLAUNCH

*FUNCTION
*  D0-16
*  D0-8  % D0->NUMBER OF PTRS
*  A=DAT0.A
*  ?C<=A.A
*  GOYES OKFCN
*  LC(5) $11309   % ERROR INALID FCN NUMBER
*  GOVLNG GPErrjmpC
* OKFCN
*  C-1.A
*  CSL.A
*  AD0EX
*  A=A-C.A
*  AD0EX        % D0->ENTRY PT+8
*  GOTO GETDATA

SAT2ARM
* % CONVERT SATURN ADDR TO ARM
* % ENTRY: C.A=SAT ADDR
* %        B.S=BANK NUM
* % EXIT: C.W=ARM ADDR
* % USES: A.W C.W P
  A=0    W
  CSRB    A
  A=C    A
  C=0    W
  LC(8) #07FC8000
  C=C+A    W
  RTN



************************
** START OF LAUNCHER
* HERE R1.W=LAUNCH ADDR
*      C.A =MEMORY REQ
*      R2.X =FLAGS

STARTLAUNCH

  A=R2.F    X
  ?ABIT=0    2  % GENEATE MMU TABLE?
  GOYES OLDLAUNCH
  GOTO DOMMULAUNCH
OLDLAUNCH  
  ?ABIT=0    1  % USER PROVIDES RAM
  GOYES ALLOCMEM 
  GOTO GETUSERRAM
ALLOCMEM
  ?C#0    A
  GOYES DOALLOC
  C=0    W
  B=0    W
  GOTO LAUNCHNOW
DOALLOC
  C=C+1    A
  GONC NORMALLOC
* % ALLOC ALL MEMORY
  D0=(5)    =DSKTOP
  C=DAT0    A
  D0=(5)    =RSKTOP
  A=DAT0    A
  C=C-A    A
  C=C-CON    A,16
  GOC    NOTENOUGHRAM
  C=C-CON    A,5
  GONC   NORMALLOC2
NOTENOUGHRAM
  GOVLNG =$jGPMEMERR
NORMALLOC
  C=C+C    A    % CONVERT TO NIBBLES
NORMALLOC2
  RSTK=C
  GOSBVL =$jMAKE$N
  C=RSTK
LAUNCHIT
  B=0    W
  B=C    A     % ALLOCATED NIBBLES
  C=0    W
  CD0EX
  D0=C
  ?CBIT=0    0
  GOYES SKPALIGN
  C=C+1    A
  B=B-1    A     % 1 NIBBLE LOST
SKPALIGN
  BSRB    A     % SEND B.LO=ALLOC BYTES

  GOSUB SAT2ARM

  CSL    W
  CSL    W
  CSL    W
  CSL    W
  CSL    W
  CSL    W
  CSL    W
  CSL    W

LAUNCHNOW
  P=	7
  C=R1.F    WP   % A.LO=ADDRESS
  P=	0
* % AT THIS POINT:
* %     C.HI=ARM RAM ADDRESS
* %     B.LO=RAM SIZE (BYTES)
* %     C.LO=ARM JUMP ADDRESS
* ARMSYS % CALL THE PROGRAM
  NIBHEX 80BFE
  GOSBVL =$jGETPTR
  C=R2.F    X
  ?CBIT=1    1  % IS USER RAM?
  GOYES DONTPUSH
  ?CBIT=0    0  % LEAVE ON STACK?
  GOYES DONTPUSH
  A=R0.F    A     % GET STR ADDR
  C=DAT1    A
  DAT1=A    A
  D1=D1-    5
  DAT1=C    A   % PUSH STRING AND SWAP
  D=D-1    A
DONTPUSH
  A=DAT0    A
  D0=D0+    5
  PC=(A)
 
GETUSERRAM
  D1=D1+    5
  A=DAT1    A
  D0=A
  A=DAT0    A        % READ PROLOG
 
  B=C    A
  LC(5) =DOCSTR
  ?C=A    A
  GOYES VALIDRAM
  LC(5) =DOHXS
  ?C=A    A
  GOYES VALIDRAM
  LC(5) =DOEXT0
  ?C=A    A
  GOYES VALIDRAM

INVALIDUSERRAM
  LA(5) #103
  GOSBVL =$jGETPTR
  GOVLNG =$jErrjmp

VALIDRAM
  D0=D0+    5
  A=DAT0    A
  B=B+B    A    % REQUIRED IN NIBBLES
  B=B+CON    A,5    % PLUS SIZE
  B=B+1    A    % PLUS PADDING
  ?A<B    A
  GOYES INVALIDUSERRAM

VALIDSIZE
  D0=D0+    5       % POINT TO START OF STRING
  GOTO LAUNCHIT
DOMMULAUNCH

* %****************************
* %* NEW MMU LOADER/LAUNCHER  *
* %* W/VIRTUAL MEMORY PACKER  *
* %****************************
* % ENTRY:
* %       R1.W=ADDRESS TO JUMP
* %       C.A = MEMORY REQ.
* %       A.X=R2.X=FLAGS
  B=C    A
* % FIND SPACE IN TEMPOB
  D1=(5) =RSKTOP
  C=0    W
  C=DAT1    A
  
  C=C+B    A
  C=C+B    A    % LEAVE SPACE AS REQUESTED
  LA(5) 8191
  C=C+A    A
  C=0    X
  CBIT=0    12  % PAGE ALIGN
  D0=C       % MMU TABLE
  R0=C.F    A     % R0=MMU TBL
  C=C+A    A    % END OF MMU TABLE
  D1=(5) =DSKTOP
  A=0    A
  A=R2.F    B
  A=0    P
  B=A    A
  B=B+B    A    % NIBBLES TO RESERVE
  A=DAT1    A
  A=A-B    A   % SPACE TO PUSH 
  ?C<A    A
  GOYES ENOUGHRAM
  GOVLNG =$jGPMEMERR % OTHERWISE ERROR
  
ENOUGHRAM

  C=A    A
  GOSUB SAT2ARM

  LC(3) #FFE
  B=C    A      % D=MEM LIMIT
 
  C=R0.F    A
  GOSUB SAT2ARM
  A=C	W
  LA(3) #FFE
  LC(5) 4096
MRAMLOOP
  ?A>=B    A
  GOYES MRAMDONE
  DAT0=A    8
  D0=D0+    8
  A=A+C    A
  GOTO MRAMLOOP

MRAMDONE
  
  A=0    W
  DAT0=A    8   % MARK END OF MMU
*  % HERE: D0=END OF MMU TABLE
*  % R0=START OF MMU TABLE
*  % R1=ADDRESS OF EXECUTABLE
  
*  % CALC NUMBER OF 4K PAGES
  C=0    W
  CD0EX
  A=R0.F    A
  C=C-A    A
  C=C+C    A
  CSR    A
  B=C    W     % B=NUMBER OF PAGES
  LA(5) 4   % MINIMUM TO RUN=4 PAGES
  ?B>A    A
  GOYES ENOUGHPAGES
  GOVLNG =$jGPMEMERR
ENOUGHPAGES
  A=R2.F    X
  ?ABIT=1    3
  GOYES USESYSRAM
FINALLAUNCH
  C=R0.F    A

  GOSUB SAT2ARM


  CSL    W
  CSL    W
  CSL    W
  CSL    W
  CSL    W
  CSL    W
  CSL    W
  CSL    W


  P=	7
  C=R1.F    WP   % C.LO=JMP ADDR
  P=	0
*  ARMSYS
  NIBHEX 80BFE

************************************************


*  R0=C   W

*  GOSBVL   =$jGETPTR

*  GOSUB MAKEHXSR0

*  GOVLNG  =PUSHA

************************************************



* % RETURN IMMEDIATELY
  GOVLNG =$jGETPTRLOOP
  
USESYSRAM
  GOSUB SKIPARMCODE

  NIBHEX FFF5D29E0292195E4195195E5014280E
  NIBHEX CB02F95E0000253E320000A0420000BE
  NIBHEX 0000053E10B2242E9FFFFFA000010A1E
  NIBHEX 520000BE10A2242ED10000BE0000053E
  NIBHEX 910000A000060A1E2001080EFFE1183E
  NIBHEX F0011C3EE001182E10A2082E1002242E
  NIBHEX FFE2283EF0022C3EE002282E4004442E
  NIBHEX 1000251E300000AA40024A5E10A2282E
  NIBHEX 1005582E9FFFFFAE4001D95E4195185E
  NIBHEX 00020A3E4002485E8196185E4302F95E
  NIBHEX C192185EFFF5DB8EC19F195E4001D95E
  NIBHEX 9FFFFFAE20A10A3E9C000A3EEFF5D29E
  NIBHEX 000EF82E000000FEEFF9DB8E56000A3E
  NIBHEX 9FFFFFAE000C0000
 
SKIPARMCODE
  A=PC
  A=A-CON    A,4
  C=RSTK
  D0=C
  A=A-C    A
  R2=A.F    A
  A=R0.F    A
  LC(5) 2048
  A=A+C    A
  D1=A
*  D=A    A
  NIBHEX 80B083F
  C=R2.F    A
  GOSBVL =$jMOVEDOWN
  A=R1.F    W
  DAT1=A    8   % STORE JMP ADDR
  C=D    A
  GOSUB SAT2ARM
  R1=C.F   W
  GOTO FINALLAUNCH  



* MAKEHXSR0
*  CD0EX
*  R4=C.F     A

** R0=HEX STRING TO PUSH

*  D0=(5) #82220
*  LA(5) =DOHXS
*  DAT0=A   A
*  D0=D0+  5
*  LA(5) #15
*  DAT0=A   A
*  D0=D0+ 5

*  C=R0.F   W

*  DAT0=C  W

*  LA(5) #82220
*  C=R4.F   A
*  D0=C
*  RTN





  
ENDCODE
DROP
;


